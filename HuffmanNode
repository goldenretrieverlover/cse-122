import java.util.*;
import java.io.*;

public class HuffmanCode {
    private HuffmanNode overallRoot; // relationship between tree and code?
    // public int[] count;
    
    public HuffmanCode(int[] frequencies) {
        // this.frequencies = frequencies;

        Queue<HuffmanNode> pq = new PriorityQueue<>();
        for (int i = 0; i < frequencies.length; i++) {
            if (frequencies[i] > 0) {
                HuffmanNode node = new HuffmanNode(frequencies[i], i); // frequency, ascii storage
                pq.add(node);
            }
        }

        while (pq.size() > 1) {
            HuffmanNode first = pq.remove();
            HuffmanNode second = pq.remove(); // check if fields of inner can be public
            HuffmanNode newNode = new HuffmanNode(first.frequency + second.frequency, -1, first, second); // don't forget to set children = 
            pq.add(newNode);
        }
        this.overallRoot = pq.remove(); // last element
    }

    public HuffmanCode(Scanner codeInput) {
        // int asciiValue = Integer.parseInt(input.nextLine());
        // String code = input.nextLine();
        while (codeInput.hasNextLine()) {
            int ascii = Integer.parseInt(codeInput.nextLine());
            String code = codeInput.nextLine();
            overallRoot = huffmanCodeHelper(overallRoot, ascii, code);
        }
    }

    private HuffmanNode huffmanCodeHelper(HuffmanNode root, int ascii, String code) {
        if (root == null) {
            root = new HuffmanNode(-1, -1);
        } 
        // if (root.left == null && root.right == null)
        if (code.length() == 0) {
            // do something, return new 
            return new HuffmanNode(-1, ascii);
        } else {
            if (code.charAt(0) == '0') {
                root.left = huffmanCodeHelper(root.left, ascii, code.substring(1));
            } else if (code.charAt(0) == '1') {
                root.right = huffmanCodeHelper(root.right, ascii, code.substring(1));
            }
            return root;
        }
        // if hit leaf
        // using String code
        // if length of code = 0,
        // print letter
        // else, (length of code > 0) 
        // keep traversing til node
        // return new HuffmanNode with letter
        // if not hit leaf
        // keep traversing to left and right
    }

    public void save(PrintStream output) {
        save(output, overallRoot, "");
    }

    private void save(PrintStream output, HuffmanNode curr, String binaryCode) {
        // String binaryCode = "";
        if (curr.right == null && curr.left == null) {
            output.println(curr.ascii);
            output.println(binaryCode);
        } else {
            // if (curr.right.ascii != -1) {
                // binaryCode += 1;
            // } else if (curr.left.ascii != -1) {
                // binaryCode += 0; // 
                // note: preorder traversal preserved through left first 
                save(output, curr.left, binaryCode + "0");
                save(output, curr.right, binaryCode + "1");
            // }
        }
    }

    public void translate(BitInputStream input, PrintStream output) {
        HuffmanNode top = overallRoot;
        while (input.hasNextBit()) {
            int binaryCode = input.nextBit();
            if (binaryCode == 0) {
                top = top.left;
            } else if (binaryCode == 1) { // have to do else if or is else ok?
                top = top.right;         
            }
            // how to find a leaf
            if (top.left == null && top.right == null) {
                output.write(top.ascii); // outputting ascii
                top = overallRoot; // only if found ascii
                // watch out for comparing strings, nums, and chars
            } 
            // moment you see a leaf, print out ascii then hop back to the top
            // iterative
        }
    }

    // private void translate(BitInputStream input, PrintStream output, HuffmanNode root) {
    //     // top of the tree variable
        
    // }

    // if (root.left == null && root.right == null) {
    //     output.write(root.ascii);
    // } else {
    //     // go left
    // }

    // if (root.left == null && root.right == null) {
    //     output.write(root.ascii);
    // } else {
    //     // go right
    // }


    private static class HuffmanNode implements Comparable<HuffmanNode> {
        public final int frequency;
        public final int ascii;
        public HuffmanNode left;
        public HuffmanNode right;

        public HuffmanNode(int frequency, int ascii, HuffmanNode left, HuffmanNode right) {
            this.frequency = frequency;
            this.ascii = ascii;
            this.left = left;
            this.right = right;
        }

        public HuffmanNode(int frequency, int ascii) {
            this(frequency, ascii, null, null);
        }

        // make constructor(s) usually 1 or 2 or 3
        // define compareTo method
        @Override
        public int compareTo(HuffmanNode other) {
            return this.frequency - other.frequency;
        } // standard, higher frequency
        // we have a priority queue not having seen an object HuffmanNode before
        // until we have one node left, after which we have a HuffmanNode Tree 


            // p much everything else uses recursion -- Scanner, save, preorder 
            // translate -- iterative (you go through tree til see last node, moment you do)
            // pop back up to the top, preorder traversal hints
            // recursively: Scanner -- like writeTree 
            // translate -- technically can do iteratively or recursively
            // so 2 iteratively or recursivel


        }



    }
