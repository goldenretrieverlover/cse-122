if (shifter.length() != Cipher.TOTAL_CHARS) {
            throw new IllegalArgumentException("length doesn't match");
        }
        Set<Character> set = new HashSet<>();
        for (int i = 0; i < shifter.length(); i++) {
            char curr = shifter.charAt(i);
            set.add(curr); 
        }
        if (set.size() < shifter.length()) {
            throw new IllegalArgumentException("duplicate chars detected");
        }
        for (int i = 0; i < shifter.length(); i++) {
            if (shifter.charAt(i) > Cipher.MAX_CHAR || shifter.charAt(i) < Cipher.MIN_CHAR) {
                throw new IllegalArgumentException("illegal chars detected");
            }
        }



// @Override
//     public String encrypt(String input) {
//         if (shifter.equals("")) {
//             throw new IllegalStateException();
//         }
//         String decryptable = "";
//         for (int i = 0; i < input.length(); i++) {
//             char letter = (shifter.charAt((int)(input.charAt(i)) - Cipher.MIN_CHAR));
//             decryptable += letter; 
//         }
//         return decryptable;
//     }

//     @Override
//     public String decrypt(String input) {
    
//         if (shifter.equals("")) {
//             throw new IllegalStateException();
//         }
//         String message = "";
//         for (int i = seeds.size(); i >= 0; i--) {
            
//         }
//         for (int i = 0; i < input.length(); i++) {
//             char letter = (char)(Cipher.MIN_CHAR + (shifter.indexOf(input.charAt(i))));
//             System.out.println(letter);

//                 message += letter;
//         }
//         return message;

//     }

